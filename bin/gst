#!/bin/bash
usage() {
cat << EOF
usage: gst [COMMAND]

SYNOPSIS
    gst is a gemset manager inspired by [gs](http://github.com/soveran/gs).
    The difference is that it stays in the same shell and just modifies gem env variables.
    To be compatible with gs, it uses a .gs directory and sets the GS_NAME variable.

USAGE
    Since gst is a script and runs in a child environment of your shell, the latter will not take the env changes unless you source them.

      $ source gst in
      $ source gst out

    Protip: in bash, \`.\` is the same as \`source\`.

    You can also run commands in the gemset using \`gst in\` without sourcing. This will execute them in the proper gem contex but will not affect the current shell.

      $ gst in gem env home

COMMANDS
    in      Modifies GEM_HOME, GEM_PATH and PATH to use the .gs directory and sets the GS_NAME variable.
    out     Restores the previous GEM_HOME, GEM_PATH and PATH. Also unsets GS_NAME.
EOF
}

if [[ "$1" != "in" && "$#" -ne 1 ]]; then
  usage
  exit 1
fi

case "$1" in
  "in")
    GS_DIR="$(pwd)/.gs"
    if [[ -z $GS_NAME ]]; then
      GST_OLD_PATH=$PATH
      GST_OLD_GEM_PATH=$GEM_PATH
      GST_OLD_GEM_HOME=$GEM_HOME

      export GST_OLD_PATH GST_OLD_GEM_PATH GST_OLD_GEM_HOME

      GS_NAME=$(pwd | sed -E "s/^.*\/(.*)$/\\1/")
      PATH="$GS_DIR/bin":$PATH
      GEM_PATH=$GS_DIR:$GEM_PATH
      GEM_HOME=$GS_DIR

      export PATH GEM_PATH GEM_HOME GS_NAME
    fi

    if [[ -n $2 ]]; then ${@:2}; fi
    ;;
  "out")
    if [[ -n $GS_NAME ]]; then
      PATH=$GST_OLD_PATH
      GEM_PATH=$GST_OLD_GEM_PATH
      GEM_HOME=$GST_OLD_GEM_HOME

      export PATH GEM_PATH GEM_HOME
      unset GST_OLD_PATH GST_OLD_GEM_PATH GST_OLD_GEM_HOME GS_NAME
    fi
    ;;
  *)
    usage
    exit 1
    ;;
esac

